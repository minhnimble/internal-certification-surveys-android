apply plugin: 'com.android.application'
apply from: 'codequality.gradle'


apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'androidx.navigation.safeargs.kotlin'
apply plugin: 'com.google.gms.google-services'

def globalConfig = rootProject.extensions.getByName("ext")

android {
    compileSdkVersion globalConfig["android_compile_sdk_version"]
    defaultConfig {
        applicationId "co.nimblehq.surveys"
        minSdkVersion globalConfig["android_min_sdk_version"]
        targetSdkVersion globalConfig["android_target_sdk_version"]
        versionCode globalConfig["android_version_code"]
        versionName globalConfig["android_version_name"]

        multiDexEnabled true
        vectorDrawables.useSupportLibrary = true
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        kapt {
            arguments {
                /** Specifies the directory where generated schema JSON files should be placed.
                 These files should be tracked in source control to track schema changes and
                 assist in schema migrations. **/
                arg("room.schemaLocation", "$projectDir/schemas")
            }
        }
    }

    signingConfigs {
        config {
            def keystorePropertiesFile = file('../secret/signing.properties')
            if (keystorePropertiesFile.exists()) {
                def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                keyAlias keystoreProperties['KEY_ALIAS']
                keyPassword keystoreProperties['KEY_PASSWORD']
                storePassword keystoreProperties['KEYSTORE_PASSWORD']
                storeFile file(keystoreProperties['STORE_FILE_PATH'])
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            debuggable false
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            // For quickly testing build with proguard, enable this
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/MANIFEST.MF'
        exclude 'META-INF/MANIFEST.mf'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/dependencies.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
        exclude 'META-INF/rxjava.properties'
    }

    flavorDimensions "stage"
    productFlavors {
        production {
            applicationId "co.nimblehq.surveys"
        }

        staging {
            applicationId "co.nimblehq.surveys.staging"
        }
    }

    sourceSets {
        staging {
            res.srcDirs = ['src/staging/res']
        }
        test {
            java.srcDirs += 'src/test/kotlin'
            resources.srcDirs += ['src/test/resources']
        }
    }

    androidExtensions {
        experimental = true
    }

    lintOptions {
        abortOnError false
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }
}

dependencies {
    implementation project(':data')

    kapt(
        "androidx.hilt:hilt-compiler:$hilt_androidx_version",
        "androidx.lifecycle:lifecycle-compiler:$arch_component_version",
        "androidx.room:room-compiler:$room_version",
        "com.github.bumptech.glide:compiler:$glide_version",
        "com.google.dagger:hilt-android-compiler:$hilt_version",
        "org.permissionsdispatcher:permissionsdispatcher-processor:$permission_dispatcher_version"
    )

    implementation(
        fileTree(dir: 'libs', include: ['*.jar']),
        "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version",
        "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version",

        "androidx.legacy:legacy-support-v4:$android_legacy_support_version",
        "androidx.appcompat:appcompat:$android_support_version",
        "androidx.recyclerview:recyclerview:$android_support_version",
        "com.google.android.material:material:$android_material",
        "com.google.firebase:firebase-analytics:$firebase_analytics_version",
        "androidx.constraintlayout:constraintlayout:$constraint_layout_version",

        "io.reactivex.rxjava2:rxjava:$rxjava_version",
        "io.reactivex.rxjava2:rxandroid:$rxandroid_version",
        "io.reactivex.rxjava2:rxkotlin:$rxkotlin_version",

        "androidx.lifecycle:lifecycle-extensions:$arch_component_version",
        "androidx.lifecycle:lifecycle-common-java8:$arch_component_version",
        "androidx.lifecycle:lifecycle-runtime:$arch_component_version",
        "androidx.lifecycle:lifecycle-viewmodel-ktx:$arch_component_version",

        "androidx.room:room-runtime:$room_version",
        "androidx.room:room-ktx:$room_version",
        "androidx.room:room-rxjava2:$room_version",

        "androidx.navigation:navigation-runtime-ktx:$nav_version",
        "androidx.navigation:navigation-fragment-ktx:$nav_version",
        "androidx.navigation:navigation-ui-ktx:$nav_version",
        "androidx.navigation:navigation-dynamic-features-fragment:$nav_version",

        "androidx.core:core:$android_support_version",
        "androidx.core:core-ktx:$android_ktx_version",
        "androidx.fragment:fragment-ktx:$fragment_ktx_version",

        "com.google.dagger:hilt-android:$hilt_version",
        "androidx.hilt:hilt-lifecycle-viewmodel:$hilt_androidx_version",
        "androidx.multidex:multidex:$multidex_version",

        "com.intuit.sdp:sdp-android:$sdp_android_version",
        "com.intuit.ssp:ssp-android:$ssp_android_version",

        "com.jakewharton.timber:timber:$timber_log_version",
        "com.github.bumptech.glide:glide:$glide_version",
        "org.permissionsdispatcher:permissionsdispatcher:$permission_dispatcher_version",
        "jp.wasabeef:blurry:$blurry_version",
        "com.facebook.shimmer:shimmer:$shimmer_version"
    )

    testImplementation(
        "androidx.room:room-testing:$room_version",
        "androidx.test:core:$test_core_version",
        "androidx.test:core-ktx:$test_core_version",
        "androidx.test.espresso:espresso-core:$test_espresso_version",
        "androidx.test.espresso:espresso-intents:$test_espresso_version",
        "androidx.test.ext:junit:$test_ext_junit_version",
        "androidx.test.ext:junit-ktx:$test_ext_junit_version",
        "androidx.test.ext:truth:$test_ext_truth_version",
        "com.nhaarman:mockito-kotlin:$test_mockito_version",
        "junit:junit:$test_junit_version",
        "org.robolectric:robolectric:$test_robolectric_version"
    )

    androidTestImplementation(
        "androidx.test:core:$test_core_version",
        "androidx.test:core-ktx:$test_core_version",
        "androidx.test.espresso:espresso-core:$test_espresso_version",
        "androidx.test.ext:junit:$test_ext_junit_version",
        "androidx.test.ext:junit-ktx:$test_ext_junit_version",
        "androidx.test:rules:$test_runner_version",
        "androidx.test:runner:$test_runner_version"
    )
}
